//////////////////////////
// 2021.02.06 / kkarung //
//     DP / Bottom-up   //
//////////////////////////
///////////////////////// report ///////////////////////////////
// 용어 설명: DP는 계단수의 개수
// 용어 설명: DP[i][j]에서 i는 자릿수, j는 시작하는 수를 의미 ex) 45656이면 i:5 j:4
// 용어 설명: DP[0][]은 useless / DP[i][0] = DP[i][1]~DP[i][9]의 합
// 목표: DP[n][0]을 구하자
// 계산: 계단수를 구할 때 1로 시작하거나 9로 시작할 때는 계단수를 다르게 계산해야 함
// - 1로 시작할 때) 2로 시작하는 n-1 자릿수의 계단수 + 1로 시작하는 n-2 자릿수의 계단수 << 이 둘의 합이 총 개수
// - 9로 시작할 때) 8로 시작하는 n-1 자릿수의 계단수 << 이 것이 총 개수
// - 나머지) j-1로 시작하는 n-1 자릿수의 계단수 + j+1로 시작하는 n-1 자릿수의 계단수 << 이 둘의 합이 총 개수

#include <iostream>
using namespace std;

int main() {
    int n;
    int DP[101][10] = {0};
    cin >> n;
    for (int i=0; i<10; i++) DP[1][i] = 1;
    DP[1][0] = 9; DP[0][1]=1; // DP[0][1]은 오로지 DP[2][1]을 계산하기 위해 설정한 것
    for (int i=2;i<=n; i++) {
        for (int j=1; j<10; j++) {
            if (j==1) DP[i][1] = DP[i-1][2]+DP[i-2][1];
            else if (j==9) DP[i][9] = DP[i-1][8];
            else DP[i][j] = DP[i-1][j+1]+DP[i-1][j-1];
            DP[i][j] %= 1000000000;
            DP[i][0] += DP[i][j];
            DP[i][0] %= 1000000000;
        }
    }
    cout << DP[n][0] << "\n";
}

//////////////////////////////////////////
// 메모리를 훨씬 덜 쓰는 방법
// https://www.acmicpc.net/source/3109581
//////////////////////////////////////////
#include<stdio.h>
int d[10];
int main()
{
	int ans=0,n;
	scanf("%d",&n);
	for(int i=1;i<=9;i++) d[i]=1;
	for(int i=2;i<=n;i++)
	{
		int T[10];
		for(int j=0;j<10;j++)
		{
			if(j==0) T[j]=d[j+1];
			else if(j==9) T[j]=d[j-1];
			else T[j]=(d[j-1]+d[j+1])%1000000000;
		}
		for(int j=0;j<10;j++) d[j]=T[j];
	}
	for(int i=0;i<10;i++)
	{
		ans=(ans+d[i])%1000000000;
	}
	printf("%d\n",ans);
}
